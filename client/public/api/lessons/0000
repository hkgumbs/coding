{
  "title": "Text, numbers, and functions",
  "items": [
    {
      "title": "Welcome",
      "content": "Throughout this course we will be learning how to write software for the web (i.e. making websites). We're going to be using a language called **Elm**. This is an unconventional choice, but here's why we think it's going to be great:\n\n### One thing at a time\n\nTraditionally, websites are built with **at least** 3 languages: HTML, CSS, and JavaScript. Many online coding courses start with JavaScript for that reason. However, it's very tricky to make a real website with **only** JavaScript. In order to really understand how it all works, you need to explore HTML and CSS eventually. That's 3 languages, just get something interactive on the screen.\n\nElm is a much newer language that generates HTML, CSS, and JavaScript on your behalf. By learning Elm, you can create a real, interactive website in one language. Along the way, **we'll learn concepts from HTML, CSS, and JavaScript**, but we won't actually write code in those languages ourselves. Why, you ask? I'll tell you!\n\n### Focus on programming\n\nThis is not a course about websites. **This is a course about coding!** We are just using websites because they are visual and pervasive. Visual mediums are nice because we can **see** what's going on. Pervasive mediums are great because you'll be able to take the skills you learn here and build something real (albeit, still digital).\n\nElm is a language for making websites, but it also lets us better focus on programming. We'll talk about this more in later lessons, but for now consider this analogy: what is the best language for learning music? Well, the answer depends! If you want to learn how to play country music, then you might choose a guitar. But if you wanted to learn music theory, then you'll probably work with a piano. That's because pianos provide **easier visualizations of core concepts** since all the keys are laid out in front of you. Elm is kind of like \"the piano of programming\", which is why we think it's a great fit.\n\n**OK, enough of me talking** let's actually see some code!"
    },
    {
      "title": "Getting something on the screen",
      "content": "First things first—let's get something on the screen! To do that we're going to need to use **HTML**. I know, I said we won't be writing actual HTML... and we're not! We're actually just telling Elm to \"create some HTML\" for us.\n\nThe first line here is an **import**, which tells the Elm where to find a certain **function**. You can read this as \"let me use the function called `text` from the `Html` file.\"\n\nIn the next line, we use `text` to put something on the screen. **Elm treats anything in quotes as normal text**. Just like typing into a cell in Excel. In Elm, we call this a **String**.\n\n> **⭐ Try** using the _Edit_ button to replace `___` with your name!",
      "code": "import [focus|Html|] exposing ([focus|text|])\n\nmain = [focus|text|] \"Hello, ___!\""
    },
    {
      "title": "Using numbers",
      "content": "Numbers work as you might expect them to: you can add, subtract, multiply, and divide, just the same as you would in Excel.\n\nNote how **parenthesis let us order functions**. In this example, we are using two functions:\n\n0. `toString` which turns the number into a String\n0. `text` which turns a String into Html (to go on the screen)",
      "code": "import Html exposing (text)\n\nmain = text [focus|(toString (1 - 2 + 3))|]"
    },
    {
      "title": "Using variables",
      "content": "Variables hold information, just **like a spreadsheet cell**. In Excel, you'd say something like `A2`. Well, in Elm, you can name variables whatever you want (almost)!\n\nWe say that \"**values**, like Strings or numbers, **are assigned to variables**.\" In this example \"the number `42` is assigned to the variable `meaningOfLife`\".\n\n**`main` is a special variable** that Elm looks for in order to show a page. That's why it's been in every example so far. Since `meaningOfLife` is a number behind-the-scenes, we still need to use `toString`.\n\n> **⭐ Try**\n\n> - Create a new variable called `two`\n> - Assign it the number `2`\n> - Use it inside of `meaningOfLife`",
      "code": "import Html exposing (text)\n\n[focus|meaningOfLife|] = 21 * 2\n\n[focus|main|] = text (toString meaningOfLife)"
    },
    {
      "title": "Review — what did we learn?",
      "content": "_TODO_\n\nSorry Isaac, I didn't finish this one."
    }
  ]
}
